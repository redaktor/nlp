
function generateLanguage(lang) {
	if (possibleLanguages.indexOf(lang) < 0) { console.log( 'Language not found:', '"'+lang+'"' ); return false; }
	__.setLang(lang);
	var allPossibles = __.allPossible();
	// make lang and lang/lexicon directory
	try { fs.mkdirSync(path.join(PATH, lang)); } catch (e) {};
	try { fs.mkdirSync(path.join(PATH, lang, 'lexicon')); } catch (e) {};


	// //////// //
	// LEXICON // 27

	function buildLexi(lang, isZip) {
		var _lMain = {};
		var _lZip = {};
		// TODO
		//var parents = require('../parents');

		// Now let's handle the module names
		// for data modules index and lexicon
		var _names = maker.map(function(g) {
			return {
				_var: [((g.folder && g.folder != 'lexicon') ? g.folder+'_' : ''), g.id].join('').replace('_index',''),
				_req: (g.folder) ? path.join(g.folder, g.id) : g.id
			};
		});

		// require data modules for use in build
		// TODO
		function reqModule(o) { data[o._var] = require(['./', path.join(lang, o._req)].join('')); }
		//_names.forEach(reqModule);
		// TODO - rest of VBN should be in lexicon.js already - also for sl "// TODO adjectives_regular"
		var __VBN = dict.VBN.words.filter(function(o) { return (__.possible(o) && o.hasOwnProperty('ref')); }).map(__.val);

		// write the data modules INDEX for build, lexicon and as survey
		var names = [];
		var _exports = [];
		_names.forEach(function(o){
			if (o._var.indexOf('rules_') === 0) {
				// TODO - we could write a separate index for /rules/ - STUB not needed yet
			} else {
				names.push( C._var, o._var, C.req1, o._req, C.req2 );
				_exports.push(C.tab, o._var, C.col, o._var, ',', C._);
			}
		});

		var exportStr = _exports.join('').slice(0,-2);
		names.push(C._, C.mod0, C.exp0, exportStr, C.exp2);
		fs.writeFileSync(	path.join(PATH, lang, '/index.ts'), '// data index for "'+ lang + '"\n' + names.join('')	);
		fs.writeFileSync(	path.join(PATH, lang, '/index.min.ts'), names.join('').replace(/'\);/gm, ".min');") );

		// now require this index module and other needed modules in the LEXICON
		var reqs = [
			C.l, C._,
			"import data = require('../index');", C._,
			"import parents = require('../../../parents'); // TODO - does not exist yet", C._, //TODO
			C.main
		];

		// put words which are NOT yet in other modules in the lexicon NOW
		// the same function (without arguments) is used in the lexicon to add words which ARE in other modules LATER...
		// TODO FIXME 'a' MUST NOT be a NU - it will be added by rules dict.
		function lexicon(cat){
			var nrOnes = Object.keys(data.numbers.ones).filter(function(s){ return s!='a' })
			var did = {
				NN: data.nouns_inflect.NN.map(function(a){ return a[0]; }).concat(Object.keys(data.nouns_inflect.uncountables)),
				NNS: data.nouns_inflect.NN.map(function(a){ return a[1]; }),
				VBN: __VBN,
				VBD: data.verbs_conjugate.irregulars.map(function(o){ return o.past; }),
				VBG: data.verbs_conjugate.irregulars.map(function(o){ return o.gerund; }),
				RB: Object.keys(data.adverbs_decline).concat(Object.keys(data.adjectives_decline.adverb.to).map(function(s) {
					return data.adjectives_decline.adverb.to[s];
				})),
			}
			var lexiZip = {
				NNA: Object.keys(data.verbs_conjugate.irregularDoers).map(function(s){ return data.verbs_conjugate.irregularDoers[s];  }),
				NNAB: data.abbreviations.nouns,
				NNP: Object.keys(data.firstnames),
				PP: Object.keys(data.nouns.PP),
				PRP: Object.keys(data.nouns.PRP),
				CP: Object.keys(data.verbs_special.CP),
				MD: Object.keys(data.verbs_special.MD),
				VBP: data.verbs_conjugate.irregulars.map(function(o){ return o.infinitive; }),
				VBZ: data.verbs_conjugate.irregulars.map(function(o){ return o.present; }),
				JJR: Object.keys(data.adjectives_decline.comparative.to).map(function(s){ return data.adjectives_decline.comparative.to[s]; }),
				JJS: Object.keys(data.adjectives_decline.superlative.to).map(function(s){ return data.adjectives_decline.superlative.to[s]; }),
				JJ: data.adjectives_demonym.concat(
						Object.keys(data.adjectives_decline.adverb.no), Object.keys(data.adjectives_decline.adverb.to),
						Object.keys(data.adjectives_decline.comparative.to), Object.keys(data.adjectives_decline.superlative.to),
						Object.keys(data.adverbs_decline).map(function(s) { return data.adverbs_decline[s]; })
				),
				CD: nrOnes.concat(
					Object.keys(data.numbers.teens),
					Object.keys(data.numbers.tens),
					Object.keys(data.numbers.multiple),
					Object.keys(data.dates.months),
					Object.keys(data.dates.days)
				)
			}
			//::NODE::
			if (cat===1) {return [did,lexiZip]}
			//::

			if (!cat) {
				var toMain = function(key, o) {
					o[key].forEach(function(w)Â { if (w && !main[w]) {main[w] = key} });
				}
				// irregulars to main
				for (var key in did) { toMain(key, did) }
				for (var key in lexiZip) { toMain(key, lexiZip) }
				// zip to main
				for (var key in zip) {
					//::BROWSER::
					zip[key] = _.repl(zip[key], ['selves', 'self', 'thing', 'what', 'how', 'ing', 'ally', 'ily', 'ly', 'ever', 'er', 'ed', 'es']);
					//::
					toMain(key, zip);
				}

				// conjugate all phrasal verbs:
				var c = {};
				var splits, verb, particle, phrasal;
				for (var pv in data.phrasalVerbs) {
					splits = pv.split(' ');
					verb = splits.shift();
					particle = splits.join(' ');
					c = parents.verb(verb).conjugate();
					for (var tense in c) {
						if (tense != 'doer') {
							phrasal = c[tense] + ' ' + particle;
							main[phrasal] = data.schema.getTense(tense).tag;
						}
					}
				}
				// conjugate all verbs: (~8ms, triples the lexicon size)
				c = {};
				data.verbs.forEach(function(verb) {
					c = parents.verb(verb).conjugate();
					for (var tense in data.schema._tense) {
						if (c[tense] && !main[c[tense]]) {
							main[c[tense]] = data.schema.getTense(tense).tag;
						}
					}
				});
				// decline all adjectives to their adverbs_ (~13ms)
				// 'to_adverb','to_superlative','to_comparative'
				// to_methods are slightly more performant than .conjugate because we skip to_noun yet ...
				data.adjectives.concat(Object.keys(data.adjectives_decline.convertables)).forEach(function(adjective) {
					if (!main.hasOwnProperty(adjective)) {
						main[adjective] = 'JJ';
						var adj = parents.adjective(adjective);
						var o = { adverb: 'RB', comparative: 'JJR', superlative: 'JJS' };
						for (var k in o) {
							var tag = o[k];
							o[k] = adj[['to_',k].join('')];
							if (o[k] && o[k] !== adjective && !main[o[k]]) {
								main[k] = main[k] || 'RB';
							}
						}
					}
				});
				// Make sure CP are CP and not conjugated verb type
				// TODO FIXME
				lexiZip.CP.forEach(function(w) {
					main[w] = 'CP';
				});

				return main;
			} else if (cat in did) { return did[cat] }
			return [];
		}
		// end of lexicon
		var _did = lexicon(1);
		['EX', 'NN', 'NNS', 'CC', 'VBD', 'VBN', 'VBG', 'DT', 'IN', 'PP', 'UH', 'FW', 'RB', 'RBR', 'RBS'].forEach(function(cat) {
			_lMain[cat] = [];
			_lZip[cat] = [];
			if (dict.hasOwnProperty(cat) && dict[cat].hasOwnProperty('words')) {
				var dw = dict[cat].words.filter(__.possible);

				if (cat === 'NN') dw = dw.filter(function(o) {
					if (o.hasOwnProperty('meta') && o.meta.noVerb) {
						var checkLang = (o.meta.noVerb instanceof Array) ? o.meta.noVerb : Object.keys(o.meta.noVerb);
						return (Object.keys(data.nouns_inflect.uncountables).indexOf(o[lang]) < 0 && checkLang.indexOf(lang) > -1);
					}
					return false;
				});
				if (cat === 'NNS') dw = dw.filter(function(o) {
					return (Object.keys(data.nouns_inflect.uncountables).indexOf(o[lang]) < 0);
				});

				var possibleLexi = function(w) {
					if (_did[0].hasOwnProperty(cat)) {
						return (_did[0][cat].indexOf(w) < 0 && lexicon(cat).indexOf(w) < 0);
					}
					if (_did[1].hasOwnProperty(cat)) {
						return (_did[1][cat].indexOf(w) < 0 && lexicon(cat).indexOf(w) < 0);
					}
					return (lexicon(cat).indexOf(w) < 0);
				}

				_lMain[cat] = dw.map(__.val).filter(possibleLexi);
				var repl = function(a) { return _.repl(a, 0, ['selves', 'self', 'thing', 'what', 'how', 'ing', 'ally', 'ily', 'ly', 'ever', 'er', 'ed', 'es']); }
				_lZip[cat] = _lMain[cat].map(repl);
			}
		});


		var lexiconStr = util.inspect(((isZip) ? _lZip : _lMain), {depth: null});
		var genStr = lexicon.toString().replace(/\bVBN:\s*__VBN\s*,\s*\n*/g,'').replace('(cat)', '(cat?)'); // TODO ugly, FIXME
		reqs.push(C._exp, lexiconStr, C.un1, genStr, C.un2);
		lexiconStr = reqs.join('');
		_names.push('lexicon.ts');

		// return the lexicon in all its glory ...
		return lexiconStr;
	}
	// end of buildLexi

/*
	// //////////////////// //
	// MAIN BUILD FUNCTION //
	var i = 0;

	function build(g, i) {
		// finish fast
		if (!g.hasOwnProperty('zip')) { return; }
		if (i === 1) { _ = require('../nlp/_'); }
		var hasMake = 0;
		function clean(s) {
			return s.replace(/^.*\/\/::BROWSER::[\s\S]*?.*[\s\S]*?\/\/::.*?$/gm, '').trim()/*.replace(/[ \t]+$/gm, '\t');
		}
		replO = {};
		function addUnzip(arr) {
			var mainArr = arr.map(clean,{isZip: 0});
			var zipArr = arr.map(clean, {isZip: 1});
			strings.zip = strings.zip.concat(zipArr);
			if (!hasMake) {
				strings.main = strings.main.concat(mainArr);
			}
		}

		// folder
		var fUp = (g.hasOwnProperty('folder')) ? '../' : '';
		var _require = ['import _ = require("../../', fUp, 'nlp/_");\n'].join('');
		var folder = '';
		if (fUp === '../') {
			folder = g.folder+'/';
			// make subfolder in {{lang}}
			try { fs.mkdirSync(path.join(PATH, lang, folder)); } catch (e) {};
		}

		// meta
		var nl = [' <br>', C._, C.doc].join('');
		var meta = [C.doc, 'data module, autogenerated by grunt.', nl];
		var cm = (g.folder === 'rules') ? 'dictionaryRules' : ((g.id === 'firstnames') ? 'dictionaryNames':'dictionary');
		meta.push('change and contribute to ', cm, nl, nl);
		var modu = [C.docm, 'data/', lang, '/', folder, g.id, C._];
		if (typeof g.description === 'string' && g.description != '') {
			meta = meta.concat([g.description.replace(/\n/gm, nl), nl]);
		}
		meta.push(nl, '@readonly', C._);
		var jsDocs = [C.doc1, meta.join(''), modu.join(''), C.doc2];
		var strings = {
			main: [jsDocs.join(''), g.prefix||'', C._, C._l],
			zip: [g.prefix||'', C._, C._l]
		};

		// generate
		var generatedMain = g.zip(lang);
		var mainStr = format(generatedMain);
		strings.main.push(C._exp, mainStr, C._);

		var generatedZip = g.zip(lang, true);
		var zipStr = format(generatedZip);
		strings.zip.push(C._exp, zipStr, C._);

		hasMake = g.hasOwnProperty('make');
		if (hasMake && g.make) {
			zip = generatedMain;
			var key = [((g.folder && g.folder != 'lexicon') ? g.folder+'_' : ''), g.id].join('').replace('_index','');
			data[key] = g.make();
			strings.main.push(C.mod1, g.make.toString(), C.mod2);
		} else if (hasMake) {
			strings.main.push(C.mod);
		}

		if (g.hasOwnProperty('unzip')) {
			var unzips = [];
			var unzStr = '';
			if (typeof g.unzip === 'string') {
				unzStr = g.unzip;
				unzips = [C._, C.mod0, g.unzip];
			} else if (g.unzip.hasOwnProperty('array')) {
				unzStr = g.unzip.fn.toString();
				unzips = [C._, g.unzip.array, C.eq, g.unzip.array, C.map1, unzStr, C.map2, C.mod];
			} else {
				unzStr = g.unzip.toString().replace(/_typeof_/g,':');
				unzips = [C._, C.mod1, unzStr, C.mod2];
			}
			addUnzip(unzips);
		} else {
			addUnzip([C.mod]);
		}

		// WRITE the generated ...
		mainStr = strings.main.join('').trim();
		zipStr = strings.zip.join('').trim();
		// check if any needs the _ helper module
		if (mainStr.match(_regex)) {
			mainStr = [_require, C._, mainStr].join('');
		}
		if (zipStr.match(_regex)) {
			zipStr = [_require, C._, zipStr].join('');
		}
		// TODO - run through beautifier
		fs.writeFileSync( path.join(PATH, lang, folder, g.id.concat('.ts')), mainStr);
		fs.writeFileSync( path.join(PATH, lang, folder, g.id.concat('.min.ts')), zipStr);

		i++;
		var colors = ['',''];

		meta = (g.folder) ? [folder, g.id].join('') : g.id;
		var nr = (i<10) ? '0'+i : i.toString();
		console.log( 'wrote module file for language', '"'+lang+'" :', [colors[0],nr,' of ',maker.length,colors[1]].join(''), ['(', meta, ')'].join('') );

		if (i === maker.length) {
			console.log( ' ' );
			colors = ['\u001b[32m', '\u001b[39m'];
			var lexiMain = [clean(buildLexi(lang))];
			var lexiZip = [clean(buildLexi(lang, true))];
			var lexiStd = [C._, C.mod0, 'main;', C._];
			fs.writeFileSync(	path.join(PATH, lang, '/lexicon/index.ts'), lexiMain.concat(lexiStd).join(''));
			fs.writeFileSync(	path.join(PATH, lang, '/lexicon/index.min.ts'), lexiZip.concat(lexiStd).join(''));
			console.log( 'wrote', colors[0], 'lexicon file', colors[1], 'for language', '"'+lang+'"');
			console.log( ' ' );
		}
	}

	// Generate data part (lexica)
	maker.forEach(build);

}
*/
