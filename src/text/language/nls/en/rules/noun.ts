/**
 * data module, autogenerated by grunt. <br>
 * change and contribute to dictionaryRules <br>
 *  <br>
 * regex rules and suffixes for nouns (inflect and indefinite article) <br>
 *  <br>
 * @readonly
 * @module data/en/rules/noun
 */
var types:any;
declare var zip:any;
zip = { which: { possessiveNoun: { matches: /'s$/, tag: 'NNO' } },
  gender: 
   { to: 
      [ [ /\b(mrs|miss|ms|misses|mme|mlle)\.?\b/i, 'she' ],
        [ /\b(mr|mister|sr|jr)\.?\b/i, 'he' ] ],
     names: 
      [ [ /[aeiy]$/i, 'she' ],
        [ /^[ou]$/i, 'he' ],
        [ /(nn|ll|tt)/i, 'she' ] ],
     female: 'she',
     male: 'he',
     fallback: 'it',
     fallbackPlural: 'they',
     fallbackNames: 'they' },
  prepositionPhrase: '([a-z]*) (of|in|by|for) [a-z]',
  article: 
   { fallback: 'a',
     plural: 'the',
     irregular: 
      { an: 
         { hour: 1,
           heir: 1,
           heirloom: 1,
           honest: 1,
           honour: 1,
           honor: 1,
           uber: 1 } },
     regex: 
      { a: [ /^onc?e/i, /^u[bcfhjkqrstn][aeiou]/i, /^eul/i ],
        an: [ /^[aeiou]/ ] },
     fn: function () {
				// spelled-out acronyms
				// pronounced letters of acronyms that get a 'an'
				var an_acronyms = { A:1, E:1, F:1, H:1, I:1, L:1, M:1, N:1, O:1, R:1, S:1, X:1 };
				if (this.is_acronym(this.word) && an_acronyms.hasOwnProperty(this.word.substr(0, 1)) ) {
					return 'an';
				}
			} },
  isPlural: { fallback: function (word) {
			// 'looks pretty plural' rules - TODO // needs some lovin' :
			if (word.match(/s$/) && !word.match(/ss$/) && word.length > 3) {
				return true;
			}
			return false;
		} },
  plural: 
   { pronoun: 'they',
     to: 
      [ [ /(ax|test)is$/i, '$1es' ],
        [ /(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i' ],
        [ /(octop|vir)i$/i, '$1i' ],
        [ /([rl])f$/i, '$1ves' ],
        [ /(alias|status)$/i, '$1es' ],
        [ /(bu)s$/i, '$1ses' ],
        [ /(zer|avocad|hal|tornad|tuxed)o$/i, '$1os' ],
        [ /(al|ad|at|er|et|ed|ad)o$/i, '$1oes' ],
        [ /([ti])um$/i, '$1a' ],
        [ /([ti])a$/i, '$1a' ],
        [ /sis$/i, 'ses' ],
        [ /(?:([^f])fe|([lr])f)$/i, '$1ves' ],
        [ /(hive|stomach|epoch)$/i, '$1s' ],
        [ /([^aeiouy]|qu)y$/i, '$1ies' ],
        [ /(x|ch|ss|sh|s|z)$/i, '$1es' ],
        [ /(matr|vert|ind|cort)(ix|ex)$/i, '$1ices' ],
        [ /([m|l])ouse$/i, '$1ice' ],
        [ /([m|l])ice$/i, '$1ice' ],
        [ /^(ox)$/i, '$1en' ],
        [ /^(oxen)$/i, '$1' ],
        [ /(quiz)$/i, '$1zes' ],
        [ /(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae' ],
        [ /(sis)$/i, 'ses' ],
        [ /^(?!talis|.*hu)(.*)man$/i, '$1men' ],
        [ /(.*)/i, '$1s' ] ],
     indicators: 
      [ /(^v)ies$/i,
        /ises$/i,
        /ives$/i,
        /(antenn|formul|nebul|vertebr|vit)ae$/i,
        /(octop|vir|radi|nucle|fung|cact|stimul)i$/i,
        /(buffal|tomat|tornad)oes$/i,
        /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i,
        /(vert|ind|cort)ices$/i,
        /(matr|append)ices$/i,
        /(x|ch|ss|sh|s|z|o)es$/i,
        /men$/i,
        /news$/i,
        /.tia$/i,
        /(^f)ves$/i,
        /(lr)ves$/i,
        /(^aeiouy|qu)ies$/i,
        /(m|l)ice$/i,
        /(cris|ax|test)es$/i,
        /(alias|status)es$/i,
        /ics$/i ] },
  singular: 
   { to: 
      [ [ /([^v])ies$/i, '$1y' ],
        [ /ises$/i, 'isis' ],
        [ /ives$/i, 'ife' ],
        [ /(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a' ],
        [ /(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us' ],
        [ /(buffal|tomat|tornad)(oes)$/i, '$1o' ],
        [ /((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i,
          '$1sis' ],
        [ /(vert|ind|cort)(ices)$/i, '$1ex' ],
        [ /(matr|append)(ices)$/i, '$1ix' ],
        [ /(x|ch|ss|sh|s|z|o)es$/i, '$1' ],
        [ /men$/i, 'man' ],
        [ /(n)ews$/i, '$1ews' ],
        [ /([ti])a$/i, '$1um' ],
        [ /([^f])ves$/i, '$1fe' ],
        [ /([lr])ves$/i, '$1f' ],
        [ /([^aeiouy]|qu)ies$/i, '$1y' ],
        [ /(s)eries$/i, '$1eries' ],
        [ /(m)ovies$/i, '$1ovie' ],
        [ /([m|l])ice$/i, '$1ouse' ],
        [ /(cris|ax|test)es$/i, '$1is' ],
        [ /(alias|status)es$/i, '$1' ],
        [ /(ss)$/i, '$1' ],
        [ /(ics)$/i, '$1' ],
        [ /s$/i, '' ] ],
     indicators: 
      [ /(ax|test)is$/i,
        /(octop|vir|radi|nucle|fung|cact|stimul)us$/i,
        /(octop|vir)i$/i,
        /(rl)f$/i,
        /(alias|status)$/i,
        /(bu)s$/i,
        /(al|ad|at|er|et|ed|ad)o$/i,
        /(ti)um$/i,
        /(ti)a$/i,
        /sis$/i,
        /(?:(^f)fe|(lr)f)$/i,
        /hive$/i,
        /(^aeiouy|qu)y$/i,
        /(x|ch|ss|sh|z)$/i,
        /(matr|vert|ind|cort)(ix|ex)$/i,
        /(m|l)ouse$/i,
        /(m|l)ice$/i,
        /(antenn|formul|nebul|vertebr|vit)a$/i,
        /.sis$/i,
        /^(?!talis|.*hu)(.*)man$/i ] },
  preposition: {} }
export = zip;